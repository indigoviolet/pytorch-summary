* PyTorch model summaries

Initially based off [[https://github.com/sksq96/pytorch-summary][pytorch-summary]].

Improvements:

- modernizes and simplifies the code
- adds input shape tracking
- supports arbitrary input objects to the model (through the ~get_input_size~ argument to ~summary()~)
- adds [[*Conv2d complexity][Conv2d complexity]]
- adds start, jump, receptive field tracking (based on [[https://github.com/Fangyh09/pytorch-receptive-field][pytorch-receptive-field]] and [[https://medium.com/mlreview/a-guide-to-receptive-field-arithmetic-for-convolutional-neural-networks-e0f514068807][this medium article]])

* Demo

#+BEGIN_SRC pycon

  In [7]: from pytorch_summary import summary, make_random_input

  In [8]: import torchvision

  In [13]: summary(torchvision.models.alexnet(), make_random_input((3,300,300)), include_conv_info=True, include_input_shape=True)
  +--------------------------------------+-------------------+-------------------+--------------+--------------+---------------------+---------+--------+------------------+
  | Layer (type,kernel,stride,padding)   | Input Shape       | Output Shape      | Input size   | Num params   | Conv2d complexity   | Start   | Jump   | ReceptiveField   |
  |--------------------------------------+-------------------+-------------------+--------------+--------------+---------------------+---------+--------+------------------|
  | AlexNet                              | [-1, 3, 300, 300] | [2, 1000]         | 270,000      | 0            |                     | 0.5     | 1      | 1                |
  | ├── features (Sequential)            | [-1, 3, 300, 300] | [-1, 256, 8, 8]   | 270,000      | 0            |                     |         |        |                  |
  | │ ├── 0 (Conv2d [11,4,2])            | [-1, 3, 300, 300] | [-1, 64, 74, 74]  | 270,000      | 23,296       | 1,051,392           | 3.5     | 4      | 11               |
  | │ ├── 1 (ReLU)                       | [-1, 64, 74, 74]  | [-1, 64, 74, 74]  | 350,464      | 0            |                     |         |        |                  |
  | │ ├── 2 (MaxPool2d [3,2,0])          | [-1, 64, 74, 74]  | [-1, 64, 36, 36]  | 350,464      | 0            | 5,308,416           | 7.5     | 8      | 19               |
  | │ ├── 3 (Conv2d [5,1,2])             | [-1, 64, 36, 36]  | [-1, 192, 36, 36] | 82,944       | 307,392      | 15,925,248          | 7.5     | 8      | 51               |
  | │ ├── 4 (ReLU)                       | [-1, 192, 36, 36] | [-1, 192, 36, 36] | 248,832      | 0            |                     |         |        |                  |
  | │ ├── 5 (MaxPool2d [3,2,0])          | [-1, 192, 36, 36] | [-1, 192, 17, 17] | 248,832      | 0            | 10,653,696          | 15.5    | 16     | 67               |
  | │ ├── 6 (Conv2d [3,1,1])             | [-1, 192, 17, 17] | [-1, 384, 17, 17] | 55,488       | 663,936      | 21,307,392          | 15.5    | 16     | 99               |
  | │ ├── 7 (ReLU)                       | [-1, 384, 17, 17] | [-1, 384, 17, 17] | 110,976      | 0            |                     |         |        |                  |
  | │ ├── 8 (Conv2d [3,1,1])             | [-1, 384, 17, 17] | [-1, 256, 17, 17] | 110,976      | 884,992      | 28,409,856          | 15.5    | 16     | 131              |
  | │ ├── 9 (ReLU)                       | [-1, 256, 17, 17] | [-1, 256, 17, 17] | 73,984       | 0            |                     |         |        |                  |
  | │ ├── 10 (Conv2d [3,1,1])            | [-1, 256, 17, 17] | [-1, 256, 17, 17] | 73,984       | 590,080      | 18,939,904          | 15.5    | 16     | 163              |
  | │ ├── 11 (ReLU)                      | [-1, 256, 17, 17] | [-1, 256, 17, 17] | 73,984       | 0            |                     |         |        |                  |
  | │ └── 12 (MaxPool2d [3,2,0])         | [-1, 256, 17, 17] | [-1, 256, 8, 8]   | 73,984       | 0            | 4,194,304           | 31.5    | 32     | 195              |
  | ├── avgpool (AdaptiveAvgPool2d)      | [-1, 256, 8, 8]   | [-1, 256, 6, 6]   | 16,384       | 0            |                     |         |        |                  |
  | └── classifier (Sequential)          | [2, 9216]         | [2, 1000]         | 18,432       | 0            |                     |         |        |                  |
  |  ├── 0 (Dropout)                     | [2, 9216]         | [2, 9216]         | 18,432       | 0            |                     |         |        |                  |
  |  ├── 1 (Linear)                      | [2, 9216]         | [2, 4096]         | 18,432       | 37,752,832   |                     |         |        |                  |
  |  ├── 2 (ReLU)                        | [2, 4096]         | [2, 4096]         | 8,192        | 0            |                     |         |        |                  |
  |  ├── 3 (Dropout)                     | [2, 4096]         | [2, 4096]         | 8,192        | 0            |                     |         |        |                  |
  |  ├── 4 (Linear)                      | [2, 4096]         | [2, 4096]         | 8,192        | 16,781,312   |                     |         |        |                  |
  |  ├── 5 (ReLU)                        | [2, 4096]         | [2, 4096]         | 8,192        | 0            |                     |         |        |                  |
  |  └── 6 (Linear)                      | [2, 4096]         | [2, 1000]         | 8,192        | 4,097,000    |                     |         |        |                  |
  +--------------------------------------+-------------------+-------------------+--------------+--------------+---------------------+---------+--------+------------------+

  +----------------------+------------+
  | Total params         | 61,100,840 |
  | Trainable params     | 61,100,840 |
  | Non-trainable params | 0          |
  | Input size           | 2.06 MiB   |
  | Intermediates size   | 10.07 MiB  |
  | Params size          | 233.08 MiB |
  | Estimated Total Size | 245.21 MiB |
  +----------------------+------------+
  Out[13]: (61100840.0, 61100840.0)

#+END_SRC

* Conv2d complexity

  Computed as ~num_input_filters * num_output_filters * H * W~

* Roadmap
